version: "3.8"

services:
  chrome:
    image: selenium/node-chrome:latest
    container_name: chrome-node
    platform: linux/amd64
    shm_size: "2gb"
    depends_on:
      - selenium-hub
    environment:
      - SE_EVENT_BUS_HOST=selenium-hub
      - SE_EVENT_BUS_PUBLISH_PORT=4442
      - SE_EVENT_BUS_SUBSCRIBE_PORT=4443
      - SE_NODE_MAX_SESSIONS=4
      - SE_NODE_MAX_INSTANCES=4
      - SE_NODE_SESSION_TIMEOUT=600

  selenium-hub:
    image: selenium/hub:latest
    platform: linux/amd64
    container_name: selenium-hub
    ports:
      - "4442:4442"
      - "4443:4443"
      - "4444:4444"

  postgres:
    image: ankane/pgvector:latest
    container_name: poestgres
    environment:
      - POSTGRES_DB=DataHunter
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - ${POSTGRES_VOLUME:-./postgres_data}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d DataHunter"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-init:
    image: ankane/pgvector:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-postgres}
    command: |
      bash -c "
        psql -h postgres -U postgres -d DataHunter -c 'CREATE EXTENSION IF NOT EXISTS vector;';
        echo 'Vector extension enabled successfully';
      "
    restart: "no"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - ${REDIS_VOLUME:-./redis_data}:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery-beat:
    build: .
    container_name: celery-beat
    command: celery -A DataHunter beat -l info
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    profiles:
      - celery
      - production

  celery-static-worker:
    build: .
    container_name: celery-static-worker
    command: celery -A DataHunter worker -Q static_crawler_queue -l info -c 5
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    deploy:
      replicas: 1
    profiles:
      - celery
      - production

  celery-dynamic-worker:
    build: .
    container_name: celery-dynamic-worker
    command: celery -A DataHunter worker -Q dynamic_crawler_queue -l info -c 3
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    deploy:
      replicas: 1
    profiles:
      - celery
      - production

  celery-default-worker:
    build: .
    container_name: celery-default-worker
    command: celery -A DataHunter worker -Q default -l info -c 2
    volumes:
      - .:/app
    working_dir: /app
    depends_on:
      - redis
      - postgres
    environment:
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    deploy:
      replicas: 1
    profiles:
      - celery
      - production